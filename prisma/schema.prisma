generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  client
  developer
  null
}

enum JobStatus {
  open
  closed
  hired
}

enum ProposalStatus {
  pending
  accepted
  rejected
}

enum ProjectStatus {
  ongoing
  completed
  cancelled
}

enum InvoiceStatus {
  unpaid
  paid
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String?
  role      Role?  
  createdAt DateTime @default(now())

  developerProfile DeveloperProfile?
  clientProfile    ClientProfile?

  jobs               Job[]       @relation("ClientJobs")
  proposals          Proposal[]  @relation("DeveloperProposals")
  projectsAsClient   Project[]   @relation("ClientProjects")
  projectsAsDeveloper Project[]  @relation("DeveloperProjects")

  accounts Account[]
  sessions Session[]
}

model DeveloperProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  description String?
  skills      String[] // e.g. ["React", "Node.js", "PostgreSQL"]
  githubUrl   String?
  portfolio   String?
  proofLinks  String[] // e.g. ["https://link1.com", "https://link2.com"]
  experience  Int?     // years of experience
  domain    String

  user        User     @relation(fields: [userId], references: [id])
}

model ClientProfile {
  id       String @id @default(uuid())
  userId   String @unique
  company  String?

  user     User   @relation(fields: [userId], references: [id])
}

model Job {
  id          String     @id @default(uuid()) @unique
  clientId    String
  title       String
  description String
  category    String
  skills      String[]
  budget      Int?
  status      JobStatus  @default(open)
  createdAt   DateTime   @default(now())

  client      User       @relation("ClientJobs", fields: [clientId], references: [id])
  proposals   Proposal[]
  project     Project?
}

model Proposal {
  id             String       @unique  @id @default(uuid())
  jobId          String
  developerId    String
  proposalText   String?
  proposedBudget Int?
  status         ProposalStatus @default(pending)
  deliveryTime    Int? // in days
  createdAt      DateTime       @default(now())

  job        Job   @relation(fields: [jobId], references: [id])
  developer  User  @relation("DeveloperProposals", fields: [developerId], references: [id])
  project    Project?
}

model Project {
  id          String        @id @default(uuid())
  jobId       String          @unique
  developerId String
  clientId    String
  proposalId  String         @unique
  title       String
  description String?
  status      ProjectStatus  @default(ongoing)
  startedAt   DateTime       @default(now())
  completedAt DateTime?

  job        Job       @relation(fields: [jobId], references: [id])
  developer  User      @relation("DeveloperProjects", fields: [developerId], references: [id])
  client     User      @relation("ClientProjects", fields: [clientId], references: [id])
  proposal   Proposal  @relation(fields: [proposalId], references: [id])
  invoices   Invoice[]
}

model Invoice {
  id          String        @id @default(uuid())
  projectId   String
  amount      Int
  description String?
  status      InvoiceStatus @default(unpaid)
  issuedAt    DateTime      @default(now())
  paidAt      DateTime?

  project     Project       @relation(fields: [projectId], references: [id])
}
